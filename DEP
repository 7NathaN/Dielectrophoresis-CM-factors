import matplotlib.pyplot as plt
import numpy as np
import cmath

# better to distribute the freq over a log space than in a lin space :P
freq = np.logspace(1, 9, num=500, base=10, endpoint=True)  # in C/Vm or F/m


# calculating CM factor
def cm_factor(particle, real_inner, cond_inner, real_mem, cond_mem, real_med, cond_med, r, d, freq):
    f_cm_polar = []
    f_cm_rect = []

    gamma = r / (r - d)

    for f in freq:
        w = 2 * np.pi * f

        # complex dielectric constant of inner/membrane of the particles
        comp_inner = complex(real_inner, - (cond_inner / w))
        comp_mem = complex(real_mem, - (cond_mem / w))

        # complex dielectric constant of particle using single-shell model
        x = (comp_inner - comp_mem) / (comp_inner + 2 * comp_mem)
        comp_particle = (comp_mem * ((gamma**3) + 2 * x)) / ((gamma**3) - x)

        # complex dielectric constant of media
        comp_media = complex(real_med, - (cond_med / w))

        # Clausius-Mossotti factor
        cm_factor = (comp_particle - comp_media) / \
            (comp_particle + 2 * comp_media)

        # cmath.polar converts the complex number into a polar number
        # gets two values, the modulus and argument(phase)
        f_cm_polar.append(cmath.polar(cm_factor))
        f_cm_rect.append(cm_factor)

    # convert the list of tuples[(a1, b1), (a2, b2), ..] into an array that can be plot
    f_cm_polar = np.array(f_cm_polar)
    f_cm_rect = np.array(f_cm_rect)

    fig, (ax1, ax3, ax5) = plt.subplots(3, 1)
    ax1.plot(np.log10([*freq]), np.array(f_cm_polar[:, 0]), 'b')
    ax1.axhline(y=0, linewidth=1, color='b', linestyle='--')
    ax2 = ax1.twinx()
    ax2.plot(np.log10([*freq]), np.array(f_cm_polar[:, 1]) * 180 / np.pi, 'r')
    ax1.set_ylabel('Re(CM factor) of ' + particle, color='b')
    ax2.set_ylabel('Phase (°)', color='r')
    ax1.set_xlabel('Frequency (log (Hz))')

    ax3.plot(np.log10([*freq]), np.real(f_cm_rect), 'b')
    ax3.axhline(y=0, linewidth=1, color='b', linestyle='--')
    ax4 = ax3.twinx()
    ax4.plot(np.log10([*freq]), np.imag(f_cm_rect), 'r')
    ax3.set_title('Bode plot')
    ax3.set_ylabel('Real', color='b')
    ax4.set_ylabel('imaginary', color='r')
    ax3.set_xlabel('Frequency (log (Hz))')

    ax5.plot(np.real(f_cm_rect), np.imag(f_cm_rect))
    ax5.set_title('Nyquist plot')
    ax5.set_ylabel('Real')
    ax5.set_xlabel('imaginary')

    # fig, ax1 = plt.subplots()
    # ax1.plot(np.log10([*freq]), np.array(f_cm_polar[:, 0]), 'b')
    # ax2 = ax1.twinx()
    # ax2.plot(np.log10([*freq]), np.array(f_cm_polar[:, 1]), 'r')
    # ax1.set_ylabel('Re(CM factor) of ' + particle, color='b')
    # ax2.set_ylabel('Phase (°)', color='r')
    # ax1.set_xlabel('Frequency (log (Hz))')

    return np.array(f_cm_polar[:, 0])


###################################################################################################################################
# calculation for PS beads #1
# A review of polystyrene bead manipulation by dielectrophoresis
# https://pubs.rsc.org/en/content/articlelanding/2019/ra/c8ra09017c#!divAbstract
# the 10 μm PS beads (εp = 2.6 and σp = 0.001 mS m−1) were suspended in DI water (εm = 79 and σm = 0.2 mS m−1)

# dielectric constatnt for vacuum
e0 = 8.854 * 10**-12

CM_PS = cm_factor(
    particle='PS beads',
    real_inner=2.5 * e0, cond_inner=1 * 10**-6,
    real_mem=2.5 * e0, cond_mem=1 * 10**-6,
    real_med=79 * e0, cond_med=0.2 * 10**-3,
    r=5 * 10**-6, d=0,
    freq=freq)


###################################################################################################################################

# # calculation for PS beads
# # Mortadi, A., E. El Melouky, R. Chahid, O. El Moznine, and Cherkaoui. "Studies of the Clausius–Mossotti Factor." Journal of Physical Studies 20.4 (2016): 4001-1-001-4. Web.

# # dielectric constatnt for vacuum
# e0 = 8.854 * 10**-12

# CM_PS = cm_factor(
#     particle='PS beads',
#     real_inner=2.5 * e0, cond_inner=1 * 10**-2,
#     real_mem=2.5 * e0, cond_mem=1 * 10**-2,
#     real_med=79 * e0, cond_med=10**-3,
#     r=5 * 10**-6, d=0,
#     freq=freq)


###################################################################################################################################
# # calculation for cell
# # Lo, Y., U. Lei, K. Chen, C. Lin, M. Huang, P. Wu, and Yang. "Derivation of the Cell Dielectric Properties Based on Clausius-Mossotti Factor." Applied Physics Letters 104.11 (2014): Applied Physics Letters, 17 March 2014, Vol.104(11). Web.

# # dielectric constant for vacuum:e0
# e0 = 8.854 * 10**-12

# CM_exo = cm_factor(
#     particle='cell',
#     real_inner=130 * e0, cond_inner=0.056,
#     real_mem=6.05 * e0, cond_mem=3.29 * 10**-6,
#     real_med=80 * e0, cond_med=0.011,
#     r=25 * 10**-6, d=5.5 * 10**-9,
#     freq=freq)

###################################################################################################################################

# #cm_factor (real_inner, cond_inner, real_mem, cond_mem, real_med, cond_med,r,d)
# # calculation for exosome

# # dielectric constant for vacuum:e0
# e0 = 8.854 * 10**-12

# CM_exo = cm_factor(
#     particle='exosome',
#     real_inner=130 * e0, cond_inner=0.056,
#     real_mem=6.05 * e0, cond_mem=3.29 * 10**-6,
#     real_med=100 * e0, cond_med=2.5,
#     r=25 * 10**-6, d=5.5 * 10**-9,
#     freq=freq)
# # calculation for lipoprotein
# CM_lip = cm_factor(
#     particle='liposome',
#     real_inner=2.5 * e0, cond_inner=0.03,
#     real_mem=5 * e0, cond_mem=10**-7,
#     real_med=1000 * e0, cond_med=2.5,
#     r=25 * 10**-9, d=1 * 10**-9,
#     freq=freq)

# # calculating the difference of CM factors of exosome and liposome
# diff = np.array(CM_exo) - np.array(CM_lip)
# plt.figure()
# plt.xlabel('frequency of applied E-field')
# plt.ylabel('differences in Re(CM factor) ')
# plt.plot(np.log10([*freq]), diff)

###################################################################################################################################

plt.tight_layout()
plt.show()
