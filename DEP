import matplotlib.pyplot as plt
import numpy as np
import cmath

freq = np.logspace(1, 12, num=500, base=10, endpoint=True)  # in C/Vm or F/m
# dielectric constatnt for vacuum
e0 = 8.854 * 10**-12


# calculating CM factor
def cm_factor(particle, real_inner, cond_inner, real_mem, cond_mem, real_med, cond_med, r, d, freq):
    f_cm = []

    gamma = r / (r - d)

    for f in freq:
        w = 2 * np.pi * f

        # complex dielectric constant of inner/membrane of the particles
        comp_inner = complex(real_inner, - (cond_inner / w))
        comp_mem = complex(real_mem, - (cond_mem / w))

        # complex dielectric constant of particle using single-shell model
        x = (comp_inner - comp_mem) / (comp_inner + 2 * comp_mem)
        comp_particle = (comp_mem * ((gamma**3) + 2 * x)) / ((gamma**3) - x)

        # complex dielectric constant of media
        comp_media = complex(real_med, - (cond_med / w))

        # Clausius-Mossotti factor
        cm_factor = (comp_particle - comp_media) / \
            (comp_particle + 2 * comp_media)
        f_cm.append(cm_factor)

    # convert the list of tuples[(a1, b1), (a2, b2), ..] into an array that can be plot
    f_cm = np.array(f_cm)

    # crossover frequency calculated using formula in A review of polystyrene bead manipulation by dielectrophoresis
    wc = (((cond_mem - cond_med) * (cond_mem + 2 * cond_med) /
           ((real_mem - real_med) * (real_mem + 2 * real_med)))**(1 / 2)) / (2 * np.pi)

    # plot
    fig, ax1 = plt.subplots(1, 1)
    ax1.plot([*freq], np.real(f_cm), 'b')
    ax1.axhline(y=0, linewidth=1, color='b', linestyle='--')
    ax1.vlines(x=wc, ymin=min(np.real(f_cm)), ymax=max(np.real(f_cm)),
               linewidth=1, color='b', linestyle='--')
    ax1.text(wc, min(np.real(f_cm)), "{:.2f}".format(np.log10(wc)))
    ax2 = ax1.twinx()
    ax2.plot([*freq], np.imag(f_cm), 'r')
    ax1.set_title(particle)
    ax1.set_ylabel('Re(CM)', color='b')
    ax2.set_ylabel('Im(CM)', color='r')
    ax1.set_xlabel('Frequency (Hz)')
    ax1.grid()
    ax1.set_xscale("log")

    return np.array(f_cm)


# cm_factor (real_inner, cond_inner, real_mem, cond_mem, real_med, cond_med,r,d)
# calculation for exosome
CM_exo = cm_factor(
    particle='exosome',
    real_inner=130 * e0, cond_inner=0.056,
    real_mem=6.05 * e0, cond_mem=3.29 * 10**-6,
    real_med=100 * e0, cond_med=2.5,
    r=25 * 10**-6, d=5.5 * 10**-9,
    freq=freq)

# calculation for lipoprotein
CM_lip = cm_factor(
    particle='liposome',
    real_inner=2.5 * e0, cond_inner=0.03,
    real_mem=5 * e0, cond_mem=10**-7,
    real_med=1000 * e0, cond_med=2.5,
    r=25 * 10**-9, d=1 * 10**-9,
    freq=freq)


plt.tight_layout()
plt.show()
